{"version":3,"sources":["components/answer.js","App.js","serviceWorker.js","index.js"],"names":["state","isClicked","handleClick","setState","props","onClick","children","this","className","disabled","isDisabled","is_correct_answer","isSelectedAnswer","Component","entities","AllHtmlEntities","App","quizState","data","correct_answer_index","Math","floor","random","currentQuestion","confirmButtonContent","score","showNextQuestion","isSelectedAnswerCorrect","setSelectedAnswer","fetch","then","res","json","isQuizFinished","reloadPage","decode","results","question","getAnswers","map","answer","isCorrectAnswer","key","setNextQuestionButtonClass","setNextQuestionButtonMessage","selectedAnswer","correctAnswer","correct_answer","answers","incorrect_answers","splice","length","window","location","reload","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffd794dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class extends Component {\r\n    state = {\r\n        isClicked: false\r\n    }\r\n\r\n    render() {\r\n        const { children } = this.props;\r\n        return <button onClick={this.handleClick}\r\n            className={this.className()}\r\n            disabled={this.isDisabled()}\r\n        >{children}</button>\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({ isClicked: true });\r\n        this.props.onClick()\r\n    }\r\n\r\n    className() {\r\n        if (this.state.isClicked)\r\n            if (this.props.is_correct_answer)\r\n                return 'green'\r\n            else\r\n                return 'red'\r\n        else\r\n            if (this.props.is_correct_answer && this.props.isSelectedAnswer)\r\n                return 'green'\r\n    }\r\n\r\n    isDisabled() {\r\n        return this.props.isSelectedAnswer\r\n    }\r\n}","import React, { Component } from 'react';\nimport './scss/main.scss';\nimport { AllHtmlEntities } from 'html-entities';\nimport Answer from './components/answer'\n\nconst entities = new AllHtmlEntities();\n\nclass App extends Component {\n  state = {\n    quizState: 'initial',\n    data: null,\n    correct_answer_index: Math.floor(Math.random() * 4),\n    currentQuestion: 0,\n    confirmButtonContent: 'Choose an answer',\n    score: 0\n  }\n\n\n  componentDidMount() {\n    if (!this.state.data) {\n      fetch('https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple')\n        .then(res => res.json())\n        .then(data => this.setState({ data })\n        )\n    }\n  }\n\n  render() {\n    const { currentQuestion, data } = this.state;\n    if (!data) return null;\n\n    return (<>\n      <div className=\"container\">\n        <div className=\"decoration-top\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n        <div className=\"jumbotron\">\n          <div className='jumbotron-item1'>ARE YOU READY?!</div>\n          <div className='jumbotron-item2'>QUIZ TIME!</div>\n        </div>\n        <div className=\"quiz\">\n          {this.isQuizFinished() ?\n            <>\n              <div className='quiz-score-description'>Your score:</div>\n              <div className='quiz-score'>{this.state.score}/10</div>\n              <button onClick={this.reloadPage}>Again?</button>\n\n            </>\n            : <>\n              <div className='quiz-question'>{entities.decode(data.results[currentQuestion].question)}</div>\n              <div className=\"quiz-answers\">\n                {this.getAnswers().map((answer) =>\n                  <Answer onClick={() => this.setSelectedAnswer(answer)}\n                    is_correct_answer={this.isCorrectAnswer(answer)}\n                    isSelectedAnswer={this.isSelectedAnswer()}\n\n                    key={answer}>{entities.decode(answer)}\n                  </Answer>\n                )}\n              </div>\n              <button onClick={this.showNextQuestion}\n                className={this.setNextQuestionButtonClass()}>\n                {this.setNextQuestionButtonMessage()}\n              </button>\n            </>\n          }\n        </div>\n        <div className=\"decoration-bottom\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    </>\n    )\n  }\n\n  setSelectedAnswer(selectedAnswer) {\n    this.setState({ selectedAnswer })\n  }\n\n  isSelectedAnswer() {\n    return !!this.state.selectedAnswer\n  }\n\n  isCorrectAnswer(answer) {\n    return answer === this.correctAnswer()\n  }\n\n  correctAnswer() {\n    return this.currentQuestion().correct_answer\n  }\n\n  currentQuestion() {\n    return this.state.data.results[this.state.currentQuestion]\n  }\n\n  getAnswers() {\n    const answers = [...this.currentQuestion().incorrect_answers];\n    answers.splice(this.state.correct_answer_index, 0, this.correctAnswer());\n    return answers\n  }\n\n  showNextQuestion = () => {\n\n    if (this.isSelectedAnswerCorrect()) {\n      this.setState({ score: this.state.score + 1 })\n    }\n\n    this.setSelectedAnswer(null);\n\n    this.setState({\n      currentQuestion: this.state.currentQuestion + 1,\n      correct_answer_index: Math.floor(Math.random() * 4)\n    })\n  }\n\n  isSelectedAnswerCorrect() {\n    if (!this.isSelectedAnswer()) return false\n    return this.isCorrectAnswer(this.state.selectedAnswer)\n  }\n\n  quizState() {\n    if (!this.isSelectedAnswer())\n      return 'initial'\n\n    if (this.isSelectedAnswerCorrect())\n      return 'green'\n    else\n      return 'red'\n  }\n\n  setNextQuestionButtonClass() {\n    switch (this.quizState()) {\n      case 'red':\n        return 'red'\n      case 'green':\n        return 'green'\n      default:\n        return 'hidden'\n    }\n  }\n\n  setNextQuestionButtonMessage() {\n    if (this.isSelectedAnswerCorrect())\n      return 'Correct! Next question'\n    return 'Wrong! Next question'\n  }\n\n  isQuizFinished() {\n    return this.state.currentQuestion === this.state.data.results.length\n  }\n\n  reloadPage() {\n    window.location.reload();\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}